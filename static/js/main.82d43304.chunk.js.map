{"version":3,"sources":["components/header.jsx","components/comment-form.jsx","components/comment.jsx","components/comment-list.jsx","actions/action-types.js","actions/add-comment.js","actions/update-author.js","actions/update-text.js","components/comment-box.jsx","reducers/comments-reducer.js","data/comments-data.js","store/comments-store.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","CommentForm","props","Form","onSubmit","e","onFormSubmit","Row","Col","Control","type","name","placeholder","onChange","onAuthorUpdate","target","value","onTextUpdate","Button","variant","Comment","_ref","comment","author","text","CommentList","comments","Table","bordered","striped","map","components_comment","key","id","keyMirror","ADD_COMMENT","UPDATE_AUTHOR","UPDATE_TEXT","DELETE_COMMENT","addComment","actionTypes","updateAuthor","updateText","CommentBox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmitForm","event","preventDefault","onAddComment","bind","assertThisInitialized","_this2","_this$props","onUpdateAuthor","onUpdateText","comment_form","comment_list","Component","connect","state","dispatch","initialState","deleteComment","tempComments","clone","remove","tempComment","commentsReducer","arguments","length","undefined","action","objectSpread","concat","toConsumableArray","Math","random","autthor","store","createStore","App","es","header","comment_box","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82d43304.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n    <h1 className='header'>React Redux Example</h1>\n)\n\nexport default Header;","import React from 'react';\nimport {Button, Form, Col} from 'react-bootstrap';\n\nconst CommentForm = (props) => (\n    <Form  onSubmit={(e)=> props.onFormSubmit(e)}>\n        <Form.Row>\n            <Col>\n                <Form.Control type=\"text\" name=\"author\" placeholder=\"Your name\"  onChange={(e)=>props.onAuthorUpdate(e.target.value)}/>\n            </Col>\n            <Col>\n                <Form.Control type=\"text\" name=\"text\" placeholder=\"Say something...\" onChange={(e)=>props.onTextUpdate(e.target.value)}/>\n            </Col>\n            <Button variant=\"primary\" type=\"submit\">Post</Button> \n        </Form.Row>\n    </Form>\n    );\n\nexport default CommentForm;","import React from \"react\";\nimport {Button} from 'react-bootstrap';\n\nconst Comment = ({comment}) => (\n    <tr className=\"comment\">\n        <td>{comment.author}</td>\n        <td>{comment.text}</td>\n        <td><Button>Edit</Button></td>\n        <td><Button>Delete</Button></td>\n    </tr>\n);\n\nexport default Comment;\n","import React from \"react\";\nimport {Table} from 'react-bootstrap';\nimport Comment from './comment';\n\n\nconst CommentList = ({comments}) => (\n    <Table bordered striped>\n    <thead>\n    <tr>\n    <th>Author</th><th>Comment</th><th>Operation1</th><th>Operation2</th>\n    </tr>\n    </thead>\n    <tbody>\n    {comments && comments.map((comment) => (\n        <Comment key={comment.id} comment = {comment} />\n    ))}\n    </tbody>\n    </Table>\n)\n\nexport default CommentList;","import keyMirror from 'keymirror';\n\nexport default keyMirror({\n    ADD_COMMENT: null,\n    UPDATE_AUTHOR: null,\n    UPDATE_TEXT: null,\n    DELETE_COMMENT: null\n});","import actionTypes from './action-types';\n\nconst addComment = (comment) => ({\n    type: actionTypes.ADD_COMMENT,\n    comment\n});\n\nexport default addComment;","import actionTypes from \"./action-types\";\n\nconst updateAuthor = (author) => ({\n    type: actionTypes.UPDATE_AUTHOR,\n    author\n});\n\nexport default updateAuthor;","import actionTypes from './action-types';\n\nconst updateText = (text) => ({\n    type: actionTypes.UPDATE_TEXT,\n    text\n});\n\nexport default updateText;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport CommentForm from './comment-form';\nimport CommentList from './comment-list';\nimport addComment from '../actions/add-comment';\nimport updateAuthor from '../actions/update-author';\nimport updateText from '../actions/update-text';\n\nclass CommentBox extends Component {\n    constructor(props) {\n        super(props);\n        this.onSubmitForm = this.onSubmitForm.bind(this);\n    }\n\n    onSubmitForm = (event) => {\n        event.preventDefault();\n        const {target} = event;\n        const {author, text} = target;\n        const comment = {\n            author: author.value,\n            text: text.value\n        }\n        const {onAddComment} = this.props;\n        onAddComment(comment);\n    }\n\n    render() {\n        const {comments, author, text, onUpdateAuthor, onUpdateText} = this.props;\n\n        return(\n            <div className=\"comment-box\">\n            <h3>please do comment..</h3>\n                <CommentForm\n                   author={author} \n                    text={text} \n                    onFormSubmit={(e) => this.onSubmitForm(e)}\n                    onAuthorUpdate={() => onUpdateAuthor}\n                    onTextUpdate={() => onUpdateText}\n                />\n                <h3>Comments</h3>\n                <CommentList comments={comments}/>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => (\n        {\n            comments: state.comments,\n            author: state.author,\n            text: state.text\n        }\n    );\n\nconst mapDispatchToProps = (dispatch) => (\n    {\n        onAddComment: (comment)=> dispatch(addComment(comment)),\n        onUpdateAuthor: (author)=> dispatch(updateAuthor(author)),\n        onUpdateText: (text)=> dispatch(updateText(text))\n    }\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentBox);","import {clone, remove} from 'lodash';\n\nimport actionTypes from \"../actions/action-types\";\nimport commentsData from '../data/comments-data';\n\nconst initialState = {\n    comments: commentsData.comments,\n    author: '',\n    text: '',\n}\n\nconst deleteComment = (comments, id) =>{\n    const tempComments = clone(comments);\n    const updatedComments = remove(tempComments, (tempComment) => tempComment.id === id);\n    return updatedComments;\n}\n\nconst commentsReducer = (state=initialState, action) => {\n   // const newState = {...state};\n    switch (action.type) {\n        case actionTypes.ADD_COMMENT:\n            return (\n                {\n                    ...state,\n                    comments: [...state.comments, {\n                        id: Math.random(),\n                        ...action.comment\n                    }]\n\n                }\n            );\n        case actionTypes.UPDATE_AUTHOR:\n            return (\n                {\n                    ...state,\n                    autthor: action.autthor\n                }\n            );\n        case actionTypes.UPDATE_TEXT:\n            return (\n                {\n                    ...state,\n                    text: action.text\n                }\n            );\n        case actionTypes.DELETE_COMMENT:\n            return (\n                {\n                    ...state,\n                    comments: deleteComment(state.comments, action.id)\n\n                }\n            );\n        default:\n        return state;\n    }\n}\n\nexport default commentsReducer;","const CommentsData = {\n    comments: [\n        {id: 1, author: \"Cory Brown\", text: \"My 2 scents\"},\n        {id: 2, author: \"Jared Anderson\", text: \"Let me put it this way. You've heard of Socrates? Aristotle? Plato? Morons!\"},\n        {id: 3, author: \"Matt Poulson\", text: \"It's just a function!\"},\n        {id: 4, author: \"Bruce Campbell\", text: \"Fish in a tree? How can that be?\"}\n    ]\n}\n\nexport default CommentsData;","import {createStore} from 'redux'\nimport commentsReducer from '../reducers/comments-reducer';\n\nconst store = createStore(commentsReducer);\n\nexport default store;","import React from 'react';\nimport {Provider} from 'react-redux';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport Header from './components/header';\nimport CommentBox from './components/comment-box';\nimport store from './store/comments-store';\n\nconst App = () => (\n  <Provider store = {store}>\n    <div className=\"App\">\n      <Header />\n      <CommentBox />\n    </div>\n  </Provider>\n\n)\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}